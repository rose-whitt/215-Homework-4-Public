package main.rice.node;

import main.rice.obj.APyObj;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

/**
 * An abstract class whose instances represent templates for creating Python objects. Each
 * APyNode is a generator for a type of APyObj. For instance, a PyIntNode generates
 * PyIntObjs. If this node represents a compound type, e.g. a list, it will hold
 * references to its child node(s).
 *
 * @param <ObjType> the type of Python object generated by this tree
 */
public abstract class APyNode<ObjType extends APyObj> {

    /**
     * a List of Number objects that will contain the exhaustive domain
     */
    private List<Number> exDomainList;
    /**
     * a List of Number objects that will contain the random domain
     */
    private List<Number> randDomainList;

    /**
     * Returns the left child; returns null if no child exists.
     *
     * @return the left child node
     */
    public  APyNode<?> getLeftChild() {
        return null;
    }

    /**
     * Returns the right child; returns null if no child exists.
     *
     * @return the right child node
     */
    public APyNode<?> getRightChild() {
        return null;
    }

    /**
     * Sets the exhaustive domain to the input list of numbers.
     *
     * @param domain the exhaustive domain
     */
    public  void setExDomain(List<Number> domain) {
        this.exDomainList = new ArrayList<>();
        for (Object num : domain) {
            this.exDomainList.add((Number) num);
        }
    }

    /**
     * @return the exhaustive domain
     */
    public List<Number> getExDomain() {
        if (this.exDomainList != null) {
            return this.exDomainList;
        }
        return null;
    }

    /**
     * Sets the random domain to the input list of numbers.
     *
     * @param domain the random domain
     */
    public void setRanDomain(List<Number> domain) {
        this.randDomainList = new ArrayList<>();
        for (Object num : domain) {
            this.randDomainList.add((Number) num);
        }
    }

    /**
     * @return the random domain
     */
    public List<Number> getRanDomain() {
        if (this.randDomainList != null) {
            return this.randDomainList;
        }
        return null;
    }

    /**
     * Generates all valid PyObjs of type ObjType within the exhaustive domain.
     *
     * @return a set of PyObjs of type ObjType comprising the exhaustive domain
     */
    public abstract Set<ObjType> genExVals();

    /**
     * Generates a single valid PyObj of type ObjType within the random domain.
     *
     * @return a single PyObj of type ObjType selected from the random domain
     */
    public abstract ObjType genRandVal();
}
